name: Fetch and Save Daily Federal Register Data

on:
  workflow_dispatch: {}
  cron: '0 6 * * *'

jobs:
  fetch_data:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Fetch and Save Federal Register Data
      env:
        FR_SEARCH_TERM: "environmental protection" # Example: can be overridden by repo secrets/vars
      run: |
        python - <<'EOF'
        import requests
        import os
        import datetime

        # Ensure data directory exists
        os.makedirs("data", exist_ok=True)

        # Get current date for filename
        current_date_obj = datetime.datetime.now() # Used for YYYYMMDD in filename
        output_filename = f"data/federal_register_{current_date_obj.strftime('%Y%m%d')}.json"

        URL = "https://www.federalregister.gov/api/v1/documents"
        
        # For the daily cron, fetch documents published "yesterday"
        yesterday_obj = current_date_obj - datetime.timedelta(days=1)
        yesterday_formatted_date = yesterday_obj.strftime("%Y-%m-%d")

        # Get search term from environment variable, defaulting to "education"
        search_term = os.getenv("FR_SEARCH_TERM", "education")

        PARAMS = {
            "conditions[term]": search_term,
            "conditions[publication_date][is]": yesterday_formatted_date,
            "per_page": 100,
            "order": "relevance",
            "fields[]": ["title", "document_number", "url", "publication_date"],
        }

        print(f"Attempting to fetch Federal Register documents with parameters: {PARAMS}")
        print(f"Output will be saved to: {output_filename}")

        try:
            resp = requests.get(URL, params=PARAMS, timeout=30)
            resp.raise_for_status()  # Raise an exception for HTTP errors (4xx or 5xx)
            
            with open(output_filename, "w", encoding="utf-8") as f:
                f.write(resp.text)
            
            print(f"Successfully fetched and saved data to {output_filename}")
            # Verify file content briefly (optional, good for debugging)
            # with open(output_filename, "r", encoding="utf-8") as f_check:
            #     print(f"First 100 chars of saved file: {f_check.read(100)}")

        except requests.exceptions.HTTPError as http_err:
            print(f"HTTP error occurred: {http_err}")
            # Check if resp is defined and has text attribute
            if 'resp' in locals() and hasattr(resp, 'text'):
                print(f"Response content: {resp.text}")
            else:
                print("Response content not available.")
            # import sys; sys.exit(1) # Optional: fail the workflow step
        except requests.exceptions.RequestException as req_err:
            print(f"Error during request to Federal Register API: {req_err}")
            # import sys; sys.exit(1) # Optional: fail the workflow step
        except Exception as e:
            print(f"An unexpected error occurred: {e}")
            # import sys; sys.exit(1) # Optional: fail the workflow step

        EOF