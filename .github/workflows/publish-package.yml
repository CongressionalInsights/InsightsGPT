name: Build, Test, and Publish Package

on:
  push:
    tags:
      - 'v*.*.*' # For publishing releases and docker images
  pull_request:
    branches:
      - main # For running build and tests

permissions:
  contents: write # For creating GitHub Releases
  packages: write # For publishing packages to GitHub Container Registry (GHCR)

jobs:
  build_and_test_package:
    name: Build and Test Python Package
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.12']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build tools
        run: pip install build

      - name: Build wheel and sdist
        run: python -m build

      - name: Install package from built wheel
        # Use a glob to find the wheel file as the exact name includes the version
        run: pip install dist/insightsgpt-*.whl

      - name: Run basic CLI tests
        run: |
          insightsgpt --version
          insightsgpt --help
          insightsgpt fetch --help 
          # Add more specific subcommand tests if necessary

      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-python-${{ matrix.python-version }}
          path: dist/

  publish_to_github_releases:
    name: Publish to GitHub Releases
    runs-on: ubuntu-latest
    needs: build_and_test_package
    # Condition to ensure it only runs on tag pushes
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download all package artifacts
        uses: actions/download-artifact@v4
        with:
          # No specific name, download all artifacts from previous jobs
          # This will create directories named after the artifacts
          path: artifacts/ 
          # If you only want artifacts from a specific Python version (e.g., 3.9)
          # name: python-package-python-3.9 

      - name: List downloaded artifacts (for debugging)
        run: ls -R artifacts

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }} # Gets the tag name like v1.1.0
          release_name: Release ${{ github.ref_name }}
          body: |
            Automated release for InsightsGPT version ${{ github.ref_name }}.
            Python package (wheel and sdist) and Docker image are available.
          draft: false
          prerelease: contains(github.ref_name, '-') # Mark as pre-release if tag contains '-' (e.g., v1.1.0-alpha)
          # Upload all .whl and .tar.gz files from all downloaded artifacts
          # Need to be careful with paths if multiple Python versions' artifacts are downloaded
          # For simplicity, let's assume we want to upload artifacts from one Python version,
          # or ensure unique naming if uploading from multiple.
          # Here, we'll target the artifacts from the python-package-python-3.9 artifact (adjust if needed)
          # This assumes the download-artifact step placed them in artifacts/python-package-python-3.9/
          # However, download-artifact without a name downloads into subdirectories named by the artifact name.
          # So, we need to specify the path to those subdirectories.
          # Let's upload all .whl and .tar.gz files found in the 'artifacts' directory and its subdirectories.
          # The create-release action's `files` input expects specific file paths.
          # We might need to list them or use a glob pattern if supported.
          # The documentation suggests it supports glob patterns.
          files: |
            artifacts/python-package-python-3.9/insightsgpt-*.whl
            artifacts/python-package-python-3.9/insightsgpt-*.tar.gz
            artifacts/python-package-python-3.12/insightsgpt-*.whl
            artifacts/python-package-python-3.12/insightsgpt-*.tar.gz


  publish_to_ghcr:
    name: Publish Docker Image to GHCR
    runs-on: ubuntu-latest
    needs: build_and_test_package # Depends on successful build and test
    # Condition to ensure it only runs on tag pushes
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/insightsgpt
          # For tags:
          # type=semver will extract the version from the Git tag (e.g., v1.1.0 -> 1.1.0)
          # type=edge will use 'edge' for the default branch (not relevant here as we trigger on tags)
          # type=sha will use the commit SHA
          # We also want 'latest' for the most recent tag
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}} # Only 'latest' for default branch pushes with tags
            type=ref,event=tag # Use the Git tag itself (e.g., v1.1.0)

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Build context is the root of the repository
          file: ./Dockerfile # Path to the Dockerfile
          push: true # Actually push the image
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
