name: Code Quality, Security, and Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: 

jobs:
  main_checks: # Renamed from 'scan' for clarity, or keep 'scan' if preferred
    name: Lint, Test, Coverage, and Static Analysis (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.12']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Using v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5 # Using v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt # Install runtime dependencies
          pip install flake8 bandit pytest pytest-cov black # Install CI tools

      - name: Run Flake8 Linter
        run: flake8 . --config .flake8

      - name: Run Bandit Security Scan
        run: bandit -r . -c .bandit.yml || true # Added common config and allow failure for now

      - name: Run tests with coverage (pytest)
        run: pytest --cov=. --cov-report=xml --cov-fail-under=80 # Ensure coverage report and fail under 80%

      # Example: Upload coverage report (optional, if Codecov or similar is used)
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v3
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }} # Store this in GitHub secrets
      #     file: ./coverage.xml 

      - name: Check code formatting with Black
        run: black --check .

  gitleaks_scan: # Added Gitleaks job from test_and_lint.yml
    name: Scan for Secrets (Gitleaks)
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4 # Using v4
        with:
          fetch-depth: 0 # Fetches all history so gitleaks can scan everything

      - name: Run Gitleaks Action
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # GITLEAKS_CONFIG: .gitleaks.toml # Uncomment if you have a custom config
