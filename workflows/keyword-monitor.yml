import os
import json
import argparse

def load_keywords(file_path):
    """
    Load keywords from a JSON file.
    Expects a list of strings in the format:
    ["keyword1", "keyword2", ...]
    """
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        print(f"Error loading keywords file: {e}")
        return []

def monitor_keywords(input_folder, output_folder, keywords):
    """
    Searches for keywords in JSON files and flags matching documents.
    
    Args:
        input_folder (str): Path to folder containing JSON files to search.
        output_folder (str): Path to folder to save flagged results.
        keywords (list): List of keywords to search for.
    """
    os.makedirs(output_folder, exist_ok=True)

    for filename in os.listdir(input_folder):
        if not filename.endswith(".json"):
            continue

        input_path = os.path.join(input_folder, filename)

        try:
            with open(input_path, "r", encoding="utf-8") as f:
                data = json.load(f)

            results = data.get("results", [])
            flagged_results = []

            for entry in results:
                entry_text = json.dumps(entry).lower()
                if any(keyword.lower() in entry_text for keyword in keywords):
                    flagged_results.append(entry)

            if flagged_results:
                output_file = os.path.join(output_folder, f"flagged_{filename}")
                with open(output_file, "w", encoding="utf-8") as out_f:
                    json.dump({"flagged_results": flagged_results}, out_f, indent=2, ensure_ascii=False)
                print(f"Flagged results saved to {output_file}")

        except Exception as e:
            print(f"Error processing file {filename}: {e}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Monitor JSON files for specific keywords.")
    parser.add_argument("--keywords", required=True, help="Path to JSON file containing keywords.")
    parser.add_argument("--input_folder", required=True, help="Path to folder containing JSON files to search.")
    parser.add_argument("--output_folder", required=True, help="Path to folder to save flagged results.")

    args = parser.parse_args()

    keywords_list = load_keywords(args.keywords)
    if not keywords_list:
        print("No keywords loaded. Exiting.")
        exit(1)

    monitor_keywords(args.input_folder, args.output_folder, keywords_list)
